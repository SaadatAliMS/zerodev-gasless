import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { EtherPaymentFallback, EtherPaymentFallbackInterface } from "../EtherPaymentFallback";
type EtherPaymentFallbackConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class EtherPaymentFallback__factory extends ContractFactory {
    constructor(...args: EtherPaymentFallbackConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<EtherPaymentFallback>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): EtherPaymentFallback;
    connect(signer: Signer): EtherPaymentFallback__factory;
    static readonly bytecode = "0x6080604052348015600f57600080fd5b50607a8061001e6000396000f3fe608060405236603f5760405134815233907f3d0ce9bfc3ed7d6862dbb28b2dea94561fe714a1b4d019aa8af39730d1ad7c3d9060200160405180910390a2005b600080fdfea26469706673582212206668e4bbb6dbe9946d5abf6185d84ed61591f832b74855b1faa773814fcf81f764736f6c63430008110033";
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "SafeReceived";
        readonly type: "event";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): EtherPaymentFallbackInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): EtherPaymentFallback;
}
export {};
