/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { SimpleAccount, SimpleAccountInterface } from "../SimpleAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "anEntryPoint",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IEntryPoint",
        name: "entryPoint",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "SimpleAccountInitialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [],
    name: "addDeposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dest",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "func",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "dest",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "func",
        type: "bytes[]",
      },
    ],
    name: "executeBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "anOwner",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "_signature",
        type: "bytes",
      },
    ],
    name: "isValidSignature",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC1155BatchReceived",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC1155Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "tokensReceived",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "userOpHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "missingAccountFunds",
        type: "uint256",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawDepositTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60c0346200016157601f620024f738819003918201601f19168301916001600160401b0383118484101762000166578084926020946040528339810103126200016157516001600160a01b038116810362000161573060805260a05260005460ff8160081c166200010c5760ff80821610620000d0575b60405161237a90816200017d82396080518181816107c901528181610d8e0152610f6b015260a0518181816109eb01528181610bbb01528181610ca4015281816111170152818161130e01528181611cfa0152611d580152f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a13862000076565b60405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806223de291461019657806301ffc9a71461018d578063150b7a02146101845780631626ba7e1461017b57806318dfb3c7146101725780633659cfe6146101695780633a871cdd146101605780634a58db19146101575780634d44560d1461014e5780634f1ef2861461014557806352d1902d1461013c5780638da5cb5b14610133578063affed0e01461012a578063b0d691fe14610121578063b61d27f614610118578063bc197c811461010f578063c399ec8814610106578063c4d66de8146100fd5763f23a6e610361000e576100f86114f5565b61000e565b506100f8611391565b506100f8611294565b506100f86111cc565b506100f861113b565b506100f86110cb565b506100f8611080565b506100f8611040565b506100f8610f24565b506100f8610d1d565b506100f8610c45565b506100f8610b78565b506100f8610980565b506100f8610774565b506100f861061f565b506100f8610567565b506100f861036d565b506100f861027c565b506100f86101f0565b73ffffffffffffffffffffffffffffffffffffffff8116036101bd57565b600080fd5b9181601f840112156101bd5782359167ffffffffffffffff83116101bd57602083818601950101116101bd57565b50346101bd5760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101bd5761022b60043561019f565b61023660243561019f565b61024160443561019f565b67ffffffffffffffff6084358181116101bd576102629036906004016101c2565b505060a4359081116101bd576100199036906004016101c2565b50346101bd5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101bd576004357fffffffff0000000000000000000000000000000000000000000000000000000081168091036101bd57807f150b7a020000000000000000000000000000000000000000000000000000000060209214908115610343575b8115610319575b506040519015158152f35b7f01ffc9a7000000000000000000000000000000000000000000000000000000009150143861030e565b7f4e2312e00000000000000000000000000000000000000000000000000000000081149150610307565b50346101bd5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101bd576103a860043561019f565b6103b360243561019f565b60643567ffffffffffffffff81116101bd576103d39036906004016101c2565b505060206040517f150b7a02000000000000000000000000000000000000000000000000000000008152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff811161044357604052565b61044b6103ff565b604052565b6020810190811067ffffffffffffffff82111761044357604052565b6060810190811067ffffffffffffffff82111761044357604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761044357604052565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209267ffffffffffffffff8111610505575b01160190565b61050d6103ff565b6104ff565b92919261051e826104c9565b9161052c6040519384610488565b8294818452818301116101bd578281602093846000960137010152565b9080601f830112156101bd5781602061056493359101610512565b90565b50346101bd5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101bd5760243567ffffffffffffffff81116101bd576105c46105bc6020923690600401610549565b60043561227e565b7fffffffff0000000000000000000000000000000000000000000000000000000060405191168152f35b9181601f840112156101bd5782359167ffffffffffffffff83116101bd576020808501948460051b0101116101bd57565b50346101bd5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101bd5767ffffffffffffffff6004358181116101bd576106709036906004016105ee565b90916024359081116101bd5761068a9036906004016105ee565b9190610694611d41565b8282036107165760005b8281106106a757005b806106db6106c06106bb600194878a611bc6565b611be4565b6106d56106ce848988611bee565b3691610512565b906121e1565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610709575b0161069e565b610711611b66565b610703565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f77726f6e67206172726179206c656e67746873000000000000000000000000006044820152fd5b50346101bd5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101bd576004356107b08161019f565b73ffffffffffffffffffffffffffffffffffffffff90817f000000000000000000000000000000000000000000000000000000000000000016916107f683301415611587565b6108257f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc938285541614611612565b61082d612201565b6040519061083a82610450565b600082527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156108745750506100199150611744565b6020600491604094939451928380927f52d1902d00000000000000000000000000000000000000000000000000000000825286165afa60009181610950575b5061093d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608490fd5b6100199361094b91146116b9565b611830565b61097291925060203d8111610979575b61096a8183610488565b81019061169d565b90386108b3565b503d610960565b50346101bd577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6060813601126101bd5760043567ffffffffffffffff81116101bd57610160816004019282360301126101bd5773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163303610b1a57610a2b610a2060243584611df4565b926044830190611adb565b905015610a56575b610a5282610a42604435611b2c565b6040519081529081906020820190565b0390f35b6024600154916bffffffffffffffffffffffff927fffffffffffffffffffffffffffffffffffffffff00000000000000000000000084821694808614610b0d575b6001860116911617600155013503610aaf5738610a33565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6163636f756e743a20696e76616c6964206e6f6e6365000000000000000000006044820152fd5b610b15611b66565b610a97565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e74000000006044820152fd5b506000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610c425773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001681813b15610c4257602491604051928380927fb760faf900000000000000000000000000000000000000000000000000000000825230600483015234905af18015610c35575b610c29575080f35b610c329061042f565b80f35b610c3d6116ac565b610c21565b80fd5b50346101bd57600060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610c4257600435610c838161019f565b610c8b612201565b8173ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001692833b15610d19576044908360405195869485937f205c287800000000000000000000000000000000000000000000000000000000855216600484015260243560248401525af18015610c3557610c29575080f35b8280fd5b5060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101bd57600435610d548161019f565b60243567ffffffffffffffff81116101bd57610d74903690600401610549565b9073ffffffffffffffffffffffffffffffffffffffff91827f00000000000000000000000000000000000000000000000000000000000000001692610dbb84301415611587565b610dea7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc948286541614611612565b610df2612201565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610e285750506100199150611744565b6020600491604094939451928380927f52d1902d00000000000000000000000000000000000000000000000000000000825286165afa60009181610f04575b50610ef1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152608490fd5b61001993610eff91146116b9565b61199b565b610f1d91925060203d81116109795761096a8183610488565b9038610e67565b50346101bd5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101bd5773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163003610fbc576040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152602090f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b50346101bd5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101bd57602060015460601c604051908152f35b50346101bd5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101bd5760206bffffffffffffffffffffffff60015416604051908152f35b50346101bd5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101bd57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101bd5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101bd576004356111778161019f565b60443567ffffffffffffffff81116101bd576000916111a661119e849336906004016101c2565b6106ce611d41565b9060208251920190602435905af16111bc6119fb565b90156111c457005b602081519101fd5b50346101bd5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101bd5761120760043561019f565b61121260243561019f565b67ffffffffffffffff6044358181116101bd576112339036906004016105ee565b50506064358181116101bd5761124d9036906004016105ee565b50506084359081116101bd576112679036906004016101c2565b50506040517fbc197c81000000000000000000000000000000000000000000000000000000008152602090f35b50346101bd576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610c42576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260208160248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa908115611384575b829161134a575b604051828152602090f35b90506020813d821161137c575b8161136460209383610488565b8101031261137857610a529150513861133f565b5080fd5b3d9150611357565b61138c6116ac565b611338565b50346101bd5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101bd576004356113cd8161019f565b61142f600054916113f560ff8460081c1615809481956114e7575b81156114c7575b50611c18565b8261142660017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff006000541617600055565b61149157611ca3565b61143557005b6114627fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff60005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b6114c26101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff6000541617600055565b611ca3565b303b159150816114d9575b50386113ef565b6001915060ff1614386114d2565b600160ff82161091506113e8565b50346101bd5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101bd5761153060043561019f565b61153b60243561019f565b60843567ffffffffffffffff81116101bd5761155b9036906004016101c2565b505060206040517ff23a6e61000000000000000000000000000000000000000000000000000000008152f35b1561158e57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b1561161957565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152fd5b908160209103126101bd575190565b506040513d6000823e3d90fd5b156116c057565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b803b156117ac5773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b9061183a82611744565b73ffffffffffffffffffffffffffffffffffffffff82167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2805115801590611993575b611889575050565b604051906118968261046c565b602782527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208301527f206661696c6564000000000000000000000000000000000000000000000000006040830152823b1561190f5760008161190c9460208394519201905af46119066119fb565b90611a2b565b50565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152fd5b506000611881565b906119a582611744565b73ffffffffffffffffffffffffffffffffffffffff82167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a28051158015906119f357611889575050565b506001611881565b3d15611a26573d90611a0c826104c9565b91611a1a6040519384610488565b82523d6000602084013e565b606090565b90919015611a37575090565b815115611a475750805190602001fd5b604051907f08c379a000000000000000000000000000000000000000000000000000000000825281602080600483015282519283602484015260005b848110611ac4575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b818101830151868201604401528593508201611a83565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1813603018212156101bd570180359067ffffffffffffffff82116101bd576020019181360383136101bd57565b80611b345750565b600080808093337ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff15061190c6119fb565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9190811015611bd7575b60051b0190565b611bdf611b96565b611bd0565b356105648161019f565b9091611c0792811015611c0b575b60051b810190611adb565b9091565b611c13611b96565b611bfc565b15611c1f57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b6bffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000006001549260601b169116178060015560601c73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000167f47e55c76e7a6f1fd8996a1da8008c1ea29699cca35e7bcd057f2dec313b6e5de600080a3565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633148015611de6575b15611d8857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f6163636f756e743a206e6f74204f776e6572206f7220456e747279506f696e746044820152fd5b5060015460601c3314611d81565b90611e3f611e37611e1973ffffffffffffffffffffffffffffffffffffffff9361219e565b611e316106ce60015460601c96610140810190611adb565b906120a7565b919091611e88565b1603611e4a57600090565b600190565b60051115611e5957565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b611e9181611e4f565b80611e995750565b611ea281611e4f565b60018103611f09576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b611f1281611e4f565b60028103611f79576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b611f8281611e4f565b6003810361200f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608490fd5b8061201b600492611e4f565b1461202257565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608490fd5b9060418151146000146120d157611c07916020820151906060604084015193015160001a906120db565b5050600090600290565b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083116121925760ff16601b81141580612187575b61217b579160809493916020936040519384528484015260408301526060820152600093849182805260015afa1561216e575b815173ffffffffffffffffffffffffffffffffffffffff811615612168579190565b50600190565b6121766116ac565b612146565b50505050600090600490565b50601c811415612113565b50505050600090600390565b60405160208101917f19457468657265756d205369676e6564204d6573736167653a0a3332000000008352603c820152603c81526121db8161046c565b51902090565b600091829182602083519301915af16121f86119fb565b90156111c45750565b60015460601c33148015612275575b1561221757565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c79206f776e6572000000000000000000000000000000000000000000006044820152fd5b50303314612210565b60015460601c9161229b9161229382826120a7565b939093611e88565b73ffffffffffffffffffffffffffffffffffffffff809316841461231c576122ce916122c9611e379261219e565b6120a7565b16036122f8577f1626ba7e0000000000000000000000000000000000000000000000000000000090565b7fffffffff0000000000000000000000000000000000000000000000000000000090565b505050507f1626ba7e000000000000000000000000000000000000000000000000000000009056fea2646970667358221220f3e88ef2a6b64e804ee805ad1678ba868eb776bd2edf80e3144f8ddeb711fdbb64736f6c63430008110033";

type SimpleAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleAccount__factory extends ContractFactory {
  constructor(...args: SimpleAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    anEntryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SimpleAccount> {
    return super.deploy(
      anEntryPoint,
      overrides || {}
    ) as Promise<SimpleAccount>;
  }
  override getDeployTransaction(
    anEntryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(anEntryPoint, overrides || {});
  }
  override attach(address: string): SimpleAccount {
    return super.attach(address) as SimpleAccount;
  }
  override connect(signer: Signer): SimpleAccount__factory {
    return super.connect(signer) as SimpleAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleAccountInterface {
    return new utils.Interface(_abi) as SimpleAccountInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleAccount {
    return new Contract(address, _abi, signerOrProvider) as SimpleAccount;
  }
}
