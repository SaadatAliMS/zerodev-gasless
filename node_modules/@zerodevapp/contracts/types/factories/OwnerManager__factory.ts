/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { OwnerManager, OwnerManagerInterface } from "../OwnerManager";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "AddedOwner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "threshold",
        type: "uint256",
      },
    ],
    name: "ChangedThreshold",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "RemovedOwner",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_threshold",
        type: "uint256",
      },
    ],
    name: "addOwnerWithThreshold",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_threshold",
        type: "uint256",
      },
    ],
    name: "changeThreshold",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwners",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getThreshold",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "isOwner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "prevOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_threshold",
        type: "uint256",
      },
    ],
    name: "removeOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "prevOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "swapOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610f2b806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a0e67e2b1161005b578063a0e67e2b146100d2578063e318b52b146100e7578063e75235b8146100fa578063f8dc5dd91461010b57600080fd5b80630d582f13146100825780632f54bf6e14610097578063694e80c3146100bf575b600080fd5b610095610090366004610caa565b61011e565b005b6100aa6100a5366004610cd4565b610375565b60405190151581526020015b60405180910390f35b6100956100cd366004610cf6565b6103ca565b6100da6104e4565b6040516100b69190610d0f565b6100956100f5366004610d69565b6105fb565b6002546040519081526020016100b6565b610095610119366004610dac565b610985565b610126610c16565b73ffffffffffffffffffffffffffffffffffffffff821615801590610162575073ffffffffffffffffffffffffffffffffffffffff8216600114155b8015610184575073ffffffffffffffffffffffffffffffffffffffff82163014155b6101ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f475332303300000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff828116600090815260208190526040902054161561027e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f475332303400000000000000000000000000000000000000000000000000000060448201526064016101e6565b600060208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d805473ffffffffffffffffffffffffffffffffffffffff858116808552604085208054929093167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556001808552835490911690911790915580549161031183610e17565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a1806002541461037157610371816103ca565b5050565b600073ffffffffffffffffffffffffffffffffffffffff82166001148015906103c4575073ffffffffffffffffffffffffffffffffffffffff8281166000908152602081905260409020541615155b92915050565b6103d2610c16565b60015481111561043e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f475332303100000000000000000000000000000000000000000000000000000060448201526064016101e6565b60018110156104a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f475332303200000000000000000000000000000000000000000000000000000060448201526064016101e6565b60028190556040518181527f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c939060200160405180910390a150565b6060600060015467ffffffffffffffff81111561050357610503610e4f565b60405190808252806020026020018201604052801561052c578160200160208202803683370190505b506001600090815260208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d549192509073ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff81166001146105f357808383815181106105a7576105a7610e7e565b73ffffffffffffffffffffffffffffffffffffffff92831660209182029290920181019190915291811660009081529182905260409091205416816105eb81610e17565b925050610576565b509092915050565b610603610c16565b73ffffffffffffffffffffffffffffffffffffffff81161580159061063f575073ffffffffffffffffffffffffffffffffffffffff8116600114155b8015610661575073ffffffffffffffffffffffffffffffffffffffff81163014155b6106c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f475332303300000000000000000000000000000000000000000000000000000060448201526064016101e6565b73ffffffffffffffffffffffffffffffffffffffff8181166000908152602081905260409020541615610756576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f475332303400000000000000000000000000000000000000000000000000000060448201526064016101e6565b73ffffffffffffffffffffffffffffffffffffffff821615801590610792575073ffffffffffffffffffffffffffffffffffffffff8216600114155b6107f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f475332303300000000000000000000000000000000000000000000000000000060448201526064016101e6565b73ffffffffffffffffffffffffffffffffffffffff83811660009081526020819052604090205481169083161461088b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f475332303500000000000000000000000000000000000000000000000000000060448201526064016101e6565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208181526040808320805487871680865283862080549289167fffffffffffffffffffffffff0000000000000000000000000000000000000000938416179055968a1685528285208054821690971790965592849052825490941690915591519081527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf910160405180910390a160405173ffffffffffffffffffffffffffffffffffffffff821681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a1505050565b61098d610c16565b806001805461099c9190610ead565b1015610a04576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f475332303100000000000000000000000000000000000000000000000000000060448201526064016101e6565b73ffffffffffffffffffffffffffffffffffffffff821615801590610a40575073ffffffffffffffffffffffffffffffffffffffff8216600114155b610aa6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f475332303300000000000000000000000000000000000000000000000000000060448201526064016101e6565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260208190526040902054811690831614610b39576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f475332303500000000000000000000000000000000000000000000000000000060448201526064016101e6565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208190526040808220805488861684529183208054929095167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790945591815282549091169091556001805491610bb183610ec0565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf9060200160405180910390a18060025414610c1157610c11816103ca565b505050565b333014610c7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f475330333100000000000000000000000000000000000000000000000000000060448201526064016101e6565b565b803573ffffffffffffffffffffffffffffffffffffffff81168114610ca557600080fd5b919050565b60008060408385031215610cbd57600080fd5b610cc683610c81565b946020939093013593505050565b600060208284031215610ce657600080fd5b610cef82610c81565b9392505050565b600060208284031215610d0857600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015610d5d57835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610d2b565b50909695505050505050565b600080600060608486031215610d7e57600080fd5b610d8784610c81565b9250610d9560208501610c81565b9150610da360408501610c81565b90509250925092565b600080600060608486031215610dc157600080fd5b610dca84610c81565b9250610dd860208501610c81565b9150604084013590509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e4857610e48610de8565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b818103818111156103c4576103c4610de8565b600081610ecf57610ecf610de8565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea264697066735822122067037ed6dffbc98453217374ccfdcd276de57ea3bc0ffdc6e5b483d84a56052364736f6c63430008110033";

type OwnerManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OwnerManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OwnerManager__factory extends ContractFactory {
  constructor(...args: OwnerManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OwnerManager> {
    return super.deploy(overrides || {}) as Promise<OwnerManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OwnerManager {
    return super.attach(address) as OwnerManager;
  }
  override connect(signer: Signer): OwnerManager__factory {
    return super.connect(signer) as OwnerManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OwnerManagerInterface {
    return new utils.Interface(_abi) as OwnerManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OwnerManager {
    return new Contract(address, _abi, signerOrProvider) as OwnerManager;
  }
}
