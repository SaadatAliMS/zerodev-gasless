/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type PolicyStruct = {
  to: PromiseOrValue<string>;
  sig: PromiseOrValue<BytesLike>;
};

export type PolicyStructOutput = [string, string] & { to: string; sig: string };

export interface FunctionSignaturePolicyFactoryInterface
  extends utils.Interface {
  functions: {
    "deploy((address,bytes4)[])": FunctionFragment;
    "getPolicy((address,bytes4)[])": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "deploy" | "getPolicy"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deploy",
    values: [PolicyStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicy",
    values: [PolicyStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPolicy", data: BytesLike): Result;

  events: {
    "NewPolicy(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewPolicy"): EventFragment;
}

export interface NewPolicyEventObject {
  policy: string;
}
export type NewPolicyEvent = TypedEvent<[string], NewPolicyEventObject>;

export type NewPolicyEventFilter = TypedEventFilter<NewPolicyEvent>;

export interface FunctionSignaturePolicyFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FunctionSignaturePolicyFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deploy(
      _policies: PolicyStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPolicy(
      _policies: PolicyStruct[],
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  deploy(
    _policies: PolicyStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPolicy(
    _policies: PolicyStruct[],
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    deploy(
      _policies: PolicyStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    getPolicy(
      _policies: PolicyStruct[],
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "NewPolicy(address)"(
      policy?: PromiseOrValue<string> | null
    ): NewPolicyEventFilter;
    NewPolicy(policy?: PromiseOrValue<string> | null): NewPolicyEventFilter;
  };

  estimateGas: {
    deploy(
      _policies: PolicyStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPolicy(
      _policies: PolicyStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deploy(
      _policies: PolicyStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPolicy(
      _policies: PolicyStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
