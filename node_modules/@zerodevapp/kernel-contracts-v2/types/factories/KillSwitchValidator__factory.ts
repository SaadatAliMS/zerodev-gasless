/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  KillSwitchValidator,
  KillSwitchValidatorInterface,
} from "../KillSwitchValidator";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "disable",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "enableData",
        type: "bytes",
      },
    ],
    name: "enable",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "killSwitchValidatorStorage",
    outputs: [
      {
        internalType: "address",
        name: "guardian",
        type: "address",
      },
      {
        internalType: "contract IKernelValidator",
        name: "validator",
        type: "address",
      },
      {
        internalType: "uint48",
        name: "pausedUntil",
        type: "uint48",
      },
      {
        internalType: "bytes4",
        name: "disableMode",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "validateSignature",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "_userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "_userOpHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657611049908161001c8239f35b600080fdfe6040608081526004908136101561001557600080fd5b600091823560e01c80630c95955614610250578063333daf92146101f25780633a871cdd14610180578381638fc925aa14610112575063dd7f49aa1461005a57600080fd5b3461010e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010e573573ffffffffffffffffffffffffffffffffffffffff9081811680910361010a579082847fffffffff0000000000000000000000000000000000000000000000000000000093608096528060205220926001828554169401549181519485528216602085015265ffffffffffff8260a01c169084015260101b166060820152f35b8380fd5b8280fd5b9290503461017c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261017c57813567ffffffffffffffff811161017757600192610164913691016102e0565b5050338352826020528220828155015580f35b505050fd5b5050fd5b5091346101eb577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc906060823601126101eb5783359167ffffffffffffffff83116101ee576101609083360301126101eb57506020926101e4916024359101610795565b9051908152f35b80fd5b5080fd5b5091346101eb57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101eb576024359067ffffffffffffffff82116101eb57506020926102496101e492369083016102e0565b91356103de565b503461010e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010e5780359067ffffffffffffffff821161010a5761029e913691016102e0565b60149291921161010e57338352826020528220903560601c7fffffffffffffffffffffffff000000000000000000000000000000000000000082541617905580f35b9181601f8401121561030e5782359167ffffffffffffffff831161030e576020838186019501011161030e57565b600080fd5b6060810190811067ffffffffffffffff82111761032f57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761032f57604052565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b91600092338452836020526104346001604086200154936040519384937f333daf92000000000000000000000000000000000000000000000000000000008552600485015260406024850152604484019161039f565b039060208173ffffffffffffffffffffffffffffffffffffffff93818587165afa938415610557578094610520575b505060019061047184610582565b51160361047f575050600190565b61051d917fffffffffffff00000000000000000000000000000000000000000000000000006104b29260301b16906105dd565b7fffffffffffff0000000000000000000000000000000000000000000000000000602073ffffffffffffffffffffffffffffffffffffffff83511679ffffffffffff0000000000000000000000000000000000000000604085015160a01b161792015160d01b161790565b90565b909193506020823d821161054f575b8161053c6020938361035e565b810103126101eb57505191600138610463565b3d915061052f565b604051903d90823e3d90fd5b6040519061057082610313565b60006040838281528260208201520152565b61058a610563565b5065ffffffffffff808260a01c1680156105d6575b604051926105ac84610313565b73ffffffffffffffffffffffffffffffffffffffff8116845260d01c602084015216604082015290565b508061059f565b6105f26105f8916105ec610563565b50610582565b91610582565b9073ffffffffffffffffffffffffffffffffffffffff9182825116928315610684575b65ffffffffffff92839182604081602085015116930151169383604081602084015116920151169080841061067c575b50808511610674575b506040519561066287610313565b16855216602084015216604082015290565b935038610654565b92503861064b565b81518116935061061b565b90357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18236030181121561030e57016020813591019167ffffffffffffffff821161030e57813603831361030e57565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18136030182121561030e570180359067ffffffffffffffff821161030e5760200191813603831361030e57565b92919267ffffffffffffffff821161032f576040519161077860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116018461035e565b82948184528183011161030e578281602093846000960137010152565b9081359073ffffffffffffffffffffffffffffffffffffffff9081831680930361030e576000938385526020948086526040928382209360018501978854978789169081610adb575b505061014085019260476107f285886106df565b9050146108085750505050505050505050600190565b61081284876106df565b60069b919b11610a0d5779ffffffffffff000000000000000000000000000000000000000081549b3560301c169a8b7fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff821617825584517f0b3dc3540000000000000000000000000000000000000000000000000000000081528481600481335afa908115610ad157908b918991610a93575b50168c817fffffffffffff00000000000000000000000000000000000000000000000000009e8f85161717845586517f57b750470000000000000000000000000000000000000000000000000000000081528681600481335afa908115610a89578a91610a11575b507dffffffff00000000000000000000000000000000000000000000000000007fffff0000000000000000000000000000000000000000000000000000000000009160101c169316171717905561096484876106df565b600694919411610a0d57516109a1949361099b9382019290600690843760268201526026815261099381610313565b519020610ff9565b936106df565b91826006116101eb5750849391926109e86109f696946109ee9360067ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa3693019101610730565b90610f25565b949094610d8c565b5416911603610a065760301b1690565b5050600190565b8580fd5b90508681813d8311610a82575b610a28818361035e565b81010312610a7e57517fffffffff0000000000000000000000000000000000000000000000000000000081168103610a7e577dffffffff000000000000000000000000000000000000000000000000000061090d565b8980fd5b503d610a1e565b88513d8c823e3d90fd5b809250868092503d8311610aca575b610aac818361035e565b81010312610ac657518a81168103610ac6578a90386108a5565b8780fd5b503d610aa2565b86513d8a823e3d90fd5b9589838594939d9c9a999883989796519e8f917f3a871cdd00000000000000000000000000000000000000000000000000000000835260048301606090526064830152828501356084830152818981898801610b37908961068f565b60a4830161016090526101c4830190610b4f9261039f565b966060890197610b5f898b61068f565b917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c92838683030160c4870152610b959261039f565b60808b013560e485015260a08b013561010485015260c08b013561012485015260e08b01356101448501526101008b0135610164850152610bda6101208c018c61068f565b8583038401610184870152610bef929161039f565b6101408b019a8b610bff9161068f565b9092858303016101a4860152610c149261039f565b908c602484015260a01c65ffffffffffff16604483015203925af1809d879e610d59575b509c89610c549d9e15600014610d4f5760018092509d8e610582565b511614610c98575050505050505050505061051d917fffffffffffff00000000000000000000000000000000000000000000000000006104b29260301b16906105dd565b86610cac92939495969798999a9c506106df565b600411610a0d57357fffffffff00000000000000000000000000000000000000000000000000000000167f4630f1d50000000000000000000000000000000000000000000000000000000014610d05575b5038806107de565b610d29610d31916109e8610d22610d1b88610ff9565b928a6106df565b3691610730565b919091610d8c565b8780885416911614610d435738610cfd565b50505094505050505090565b6001919d8e610582565b9d50838e813d8311610d85575b610d70818361035e565b81010312610d81579c519c89610c38565b8680fd5b503d610d66565b6005811015610ef65780610d9d5750565b60018103610e035760646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152fd5b60028103610e695760646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152fd5b600314610e7257565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b906041815114600014610f5357610f4f916020820151906060604084015193015160001a90610f5d565b9091565b5050600090600290565b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311610fed5791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa15610fe057815173ffffffffffffffffffffffffffffffffffffffff811615610fda579190565b50600190565b50604051903d90823e3d90fd5b50505050600090600390565b60405160208101917f19457468657265756d205369676e6564204d6573736167653a0a3332000000008352603c820152603c815261103681610313565b5190209056fea164736f6c6343000812000a";

type KillSwitchValidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: KillSwitchValidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class KillSwitchValidator__factory extends ContractFactory {
  constructor(...args: KillSwitchValidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<KillSwitchValidator> {
    return super.deploy(overrides || {}) as Promise<KillSwitchValidator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): KillSwitchValidator {
    return super.attach(address) as KillSwitchValidator;
  }
  override connect(signer: Signer): KillSwitchValidator__factory {
    return super.connect(signer) as KillSwitchValidator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): KillSwitchValidatorInterface {
    return new utils.Interface(_abi) as KillSwitchValidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): KillSwitchValidator {
    return new Contract(address, _abi, signerOrProvider) as KillSwitchValidator;
  }
}
