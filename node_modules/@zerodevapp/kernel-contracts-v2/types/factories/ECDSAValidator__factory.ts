/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  ECDSAValidator,
  ECDSAValidatorInterface,
} from "../ECDSAValidator";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "kernel",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerChanged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "disable",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "ecdsaValidatorStorage",
    outputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "enable",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "validateSignature",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "_userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "_userOpHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576107df908161001c8239f35b600080fdfe60406080815260048036101561001457600080fd5b600091823560e01c80630c959556146101fc57806320709efc1461018e578063333daf92146101305780633a871cdd146100be57638fc925aa1461005757600080fd5b8291346100ba5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100ba5780359067ffffffffffffffff82116100b5576100a6913691016102c9565b50503382528160205281205580f35b505050fd5b5050fd5b508234610129577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc906060823601126101295783359167ffffffffffffffff831161012c5761016090833603011261012957506020926101229160243591016103ed565b9051908152f35b80fd5b5080fd5b50823461012957817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610129576024359067ffffffffffffffff8211610129575060209261018761012292369083016102c9565b9135610756565b5090346101f85760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101f8573573ffffffffffffffffffffffffffffffffffffffff908181168091036101f457838391602095528085522054169051908152f35b8380fd5b8280fd5b5090346101f85760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101f85780359067ffffffffffffffff82116101f45761024b913691016102c9565b6014116101f85773ffffffffffffffffffffffffffffffffffffffff903560601c91338452836020528320805490837fffffffffffffffffffffffff0000000000000000000000000000000000000000831617905516337f381c0d11398486654573703c51ee8210ce9461764d133f9f0e53b6a5397053318480a480f35b9181601f840112156102f75782359167ffffffffffffffff83116102f757602083818601950101116102f757565b600080fd5b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1813603018212156102f7570180359067ffffffffffffffff82116102f7576020019181360383136102f757565b92919267ffffffffffffffff918281116103be57604051927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f81601f8501160116840190848210908211176103be576040528294818452818301116102f7578281602093846000960137010152565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600092919073ffffffffffffffffffffffffffffffffffffffff908481358381169081900361012c5781528060205282604082205416936101408301918461045361044b61044561043e87896102fc565b369161034d565b8561062e565b919091610495565b16861461048c57509161047861043e61044b9361047261047e96610702565b936102fc565b9061062e565b160361048657565b60019150565b96505050505050565b60058110156105ff57806104a65750565b6001810361050c5760646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152fd5b600281036105725760646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152fd5b60031461057b57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b90604181511460001461065c57610658916020820151906060604084015193015160001a90610666565b9091565b5050600090600290565b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083116106f65791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa156106e957815173ffffffffffffffffffffffffffffffffffffffff8116156106e3579190565b50600190565b50604051903d90823e3d90fd5b50505050600090600390565b60405160208101917f19457468657265756d205369676e6564204d6573736167653a0a3332000000008352603c820152603c81526060810181811067ffffffffffffffff8211176103be5760405251902090565b33600052600060205273ffffffffffffffffffffffffffffffffffffffff918260406000205416938361079661044b61079036858761034d565b8661062e565b1685146107c85761047861044b926107b06107b895610702565b92369161034d565b16036107c357600090565b600190565b505050505060009056fea164736f6c6343000812000a";

type ECDSAValidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ECDSAValidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ECDSAValidator__factory extends ContractFactory {
  constructor(...args: ECDSAValidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ECDSAValidator> {
    return super.deploy(overrides || {}) as Promise<ECDSAValidator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ECDSAValidator {
    return super.attach(address) as ECDSAValidator;
  }
  override connect(signer: Signer): ECDSAValidator__factory {
    return super.connect(signer) as ECDSAValidator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ECDSAValidatorInterface {
    return new utils.Interface(_abi) as ECDSAValidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ECDSAValidator {
    return new Contract(address, _abi, signerOrProvider) as ECDSAValidator;
  }
}
