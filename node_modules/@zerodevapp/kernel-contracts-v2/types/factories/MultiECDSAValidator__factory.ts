/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  MultiECDSAValidator,
  MultiECDSAValidatorInterface,
} from "../MultiECDSAValidator";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "kernel",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnerAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "kernel",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnerRemoved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "disable",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "enable",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "kernel",
        type: "address",
      },
    ],
    name: "isOwner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "validateSignature",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "_userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "_userOpHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610b64908161001c8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600090813560e01c9081630c9595561461033857508063333daf92146102db5780633a871cdd146102715780637ddc02d4146101f257638fc925aa1461005b57600080fd5b346101ef576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101eb5767ffffffffffffffff9380358581116101e7576100aa91369101610563565b819591019482818703126101e75780359182116101e757019380601f860112156101e35784356100d981610606565b956100e686519788610596565b818752838088019260051b8201019283116101df578301905b8282106101af57505050815b84518110156101ab576101a69073ffffffffffffffffffffffffffffffffffffffff80610138838961067a565b5116855284845285852033865284528585207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00815416905561017a828861067a565b5116337fe594d081b4382713733fe631966432c9cea5199afb2db5c3c1931f9f930036798680a361061e565b61010b565b8280f35b813573ffffffffffffffffffffffffffffffffffffffff811681036101db5781529083019083016100ff565b8580fd5b8480fd5b8280fd5b8380fd5b5080fd5b80fd5b5091346101e357817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101e3573573ffffffffffffffffffffffffffffffffffffffff908181168091036101e7576024359182168092036101e7578360ff92849260209652818652828220908252855220541690519015158152f35b50346101ef577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc906060823601126101ef5783359167ffffffffffffffff83116101eb576101609083360301126101ef57506020926102d4916024359101610773565b9051908152f35b50346101ef57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101ef576024359067ffffffffffffffff82116101ef57506020926103316102d49236908301610563565b9135610aec565b9050346101eb57602090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101e35767ffffffffffffffff9480358681116101df5784918361038f819336908401610563565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000009135828116916014811061054e575b505090507fa0e67e2b00000000000000000000000000000000000000000000000000000000825260601c5afa9485156105445783956104a0575b5050815b84518110156101ab5761049b9073ffffffffffffffffffffffffffffffffffffffff8061042a838961067a565b51168552848452858520338652845285852060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905561046f828861067a565b5116337fc82bdbbf677a2462f2a7e22e4ba9abd209496b69cd7b868b3b1d28f76e09a40a8680a361061e565b6103fd565b909194503d8084843e6104b38184610596565b82019185818403126101e75780519182116101e757019080601f830112156101e35781516104e081610606565b926104ed86519485610596565b818452868085019260051b8201019283116101df578601905b828210610518575050509238806103f9565b815173ffffffffffffffffffffffffffffffffffffffff811681036101db578152908601908601610506565b84513d85823e3d90fd5b8391925060140360031b1b16168038806103bf565b9181601f840112156105915782359167ffffffffffffffff8311610591576020838186019501011161059157565b600080fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176105d757604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff81116105d75760051b60200190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461064b5760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b805182101561068e5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215610591570180359067ffffffffffffffff82116105915760200191813603831361059157565b92919267ffffffffffffffff82116105d7576040519161075660207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184610596565b829481845281830111610591578281602093846000960137010152565b6107a29161014082019061079a61079461078d84866106bd565b369161070e565b826109ca565b949094610831565b73ffffffffffffffffffffffffffffffffffffffff9283600095168552846020526040852033865260205260ff60408620541661082a576107f561078d610803946107ef6107fb95610a98565b936106bd565b906109ca565b919091610831565b168152806020526040812033825260205260ff604082205416156108245790565b50600190565b5050505090565b600581101561099b57806108425750565b600181036108a85760646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152fd5b6002810361090e5760646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152fd5b60031461091757565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9060418151146000146109f8576109f4916020820151906060604084015193015160001a90610a02565b9091565b5050600090600290565b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311610a8c5791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa15610a7f57815173ffffffffffffffffffffffffffffffffffffffff811615610824579190565b50604051903d90823e3d90fd5b50505050600090600390565b60405160208101917f19457468657265756d205369676e6564204d6573736167653a0a3332000000008352603c820152603c81526060810181811067ffffffffffffffff8211176105d75760405251902090565b610b05929161079a610aff36858461070e565b836109ca565b73ffffffffffffffffffffffffffffffffffffffff9283600095168552846020526040852033865260205260ff60408620541661082a576107f56107fb92610b4f61080395610a98565b92369161070e56fea164736f6c6343000812000a";

type MultiECDSAValidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultiECDSAValidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultiECDSAValidator__factory extends ContractFactory {
  constructor(...args: MultiECDSAValidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MultiECDSAValidator> {
    return super.deploy(overrides || {}) as Promise<MultiECDSAValidator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultiECDSAValidator {
    return super.attach(address) as MultiECDSAValidator;
  }
  override connect(signer: Signer): MultiECDSAValidator__factory {
    return super.connect(signer) as MultiECDSAValidator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultiECDSAValidatorInterface {
    return new utils.Interface(_abi) as MultiECDSAValidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultiECDSAValidator {
    return new Contract(address, _abi, signerOrProvider) as MultiECDSAValidator;
  }
}
