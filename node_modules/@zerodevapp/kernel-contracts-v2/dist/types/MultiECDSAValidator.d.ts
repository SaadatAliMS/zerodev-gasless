import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export type UserOperationStruct = {
    sender: PromiseOrValue<string>;
    nonce: PromiseOrValue<BigNumberish>;
    initCode: PromiseOrValue<BytesLike>;
    callData: PromiseOrValue<BytesLike>;
    callGasLimit: PromiseOrValue<BigNumberish>;
    verificationGasLimit: PromiseOrValue<BigNumberish>;
    preVerificationGas: PromiseOrValue<BigNumberish>;
    maxFeePerGas: PromiseOrValue<BigNumberish>;
    maxPriorityFeePerGas: PromiseOrValue<BigNumberish>;
    paymasterAndData: PromiseOrValue<BytesLike>;
    signature: PromiseOrValue<BytesLike>;
};
export type UserOperationStructOutput = [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
] & {
    sender: string;
    nonce: BigNumber;
    initCode: string;
    callData: string;
    callGasLimit: BigNumber;
    verificationGasLimit: BigNumber;
    preVerificationGas: BigNumber;
    maxFeePerGas: BigNumber;
    maxPriorityFeePerGas: BigNumber;
    paymasterAndData: string;
    signature: string;
};
export interface MultiECDSAValidatorInterface extends utils.Interface {
    functions: {
        "disable(bytes)": FunctionFragment;
        "enable(bytes)": FunctionFragment;
        "isOwner(address,address)": FunctionFragment;
        "validateSignature(bytes32,bytes)": FunctionFragment;
        "validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "disable" | "enable" | "isOwner" | "validateSignature" | "validateUserOp"): FunctionFragment;
    encodeFunctionData(functionFragment: "disable", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "enable", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "isOwner", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "validateSignature", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "validateUserOp", values: [
        UserOperationStruct,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    decodeFunctionResult(functionFragment: "disable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "validateSignature", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "validateUserOp", data: BytesLike): Result;
    events: {
        "OwnerAdded(address,address)": EventFragment;
        "OwnerRemoved(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnerAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnerRemoved"): EventFragment;
}
export interface OwnerAddedEventObject {
    kernel: string;
    owner: string;
}
export type OwnerAddedEvent = TypedEvent<[
    string,
    string
], OwnerAddedEventObject>;
export type OwnerAddedEventFilter = TypedEventFilter<OwnerAddedEvent>;
export interface OwnerRemovedEventObject {
    kernel: string;
    owner: string;
}
export type OwnerRemovedEvent = TypedEvent<[
    string,
    string
], OwnerRemovedEventObject>;
export type OwnerRemovedEventFilter = TypedEventFilter<OwnerRemovedEvent>;
export interface MultiECDSAValidator extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MultiECDSAValidatorInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        disable(_data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        enable(_data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        isOwner(owner: PromiseOrValue<string>, kernel: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        validateSignature(hash: PromiseOrValue<BytesLike>, signature: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[BigNumber]>;
        validateUserOp(_userOp: UserOperationStruct, _userOpHash: PromiseOrValue<BytesLike>, arg2: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber] & {
            validationData: BigNumber;
        }>;
    };
    disable(_data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    enable(_data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    isOwner(owner: PromiseOrValue<string>, kernel: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    validateSignature(hash: PromiseOrValue<BytesLike>, signature: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
    validateUserOp(_userOp: UserOperationStruct, _userOpHash: PromiseOrValue<BytesLike>, arg2: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    callStatic: {
        disable(_data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        enable(_data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        isOwner(owner: PromiseOrValue<string>, kernel: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        validateSignature(hash: PromiseOrValue<BytesLike>, signature: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        validateUserOp(_userOp: UserOperationStruct, _userOpHash: PromiseOrValue<BytesLike>, arg2: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    filters: {
        "OwnerAdded(address,address)"(kernel?: PromiseOrValue<string> | null, owner?: PromiseOrValue<string> | null): OwnerAddedEventFilter;
        OwnerAdded(kernel?: PromiseOrValue<string> | null, owner?: PromiseOrValue<string> | null): OwnerAddedEventFilter;
        "OwnerRemoved(address,address)"(kernel?: PromiseOrValue<string> | null, owner?: PromiseOrValue<string> | null): OwnerRemovedEventFilter;
        OwnerRemoved(kernel?: PromiseOrValue<string> | null, owner?: PromiseOrValue<string> | null): OwnerRemovedEventFilter;
    };
    estimateGas: {
        disable(_data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        enable(_data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        isOwner(owner: PromiseOrValue<string>, kernel: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        validateSignature(hash: PromiseOrValue<BytesLike>, signature: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        validateUserOp(_userOp: UserOperationStruct, _userOpHash: PromiseOrValue<BytesLike>, arg2: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        disable(_data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        enable(_data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        isOwner(owner: PromiseOrValue<string>, kernel: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        validateSignature(hash: PromiseOrValue<BytesLike>, signature: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        validateUserOp(_userOp: UserOperationStruct, _userOpHash: PromiseOrValue<BytesLike>, arg2: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
