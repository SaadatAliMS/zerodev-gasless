import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export type ExecutionDetailStruct = {
    validUntil: PromiseOrValue<BigNumberish>;
    validAfter: PromiseOrValue<BigNumberish>;
    executor: PromiseOrValue<string>;
    validator: PromiseOrValue<string>;
};
export type ExecutionDetailStructOutput = [number, number, string, string] & {
    validUntil: number;
    validAfter: number;
    executor: string;
    validator: string;
};
export interface KernelStorageInterface extends utils.Interface {
    functions: {
        "disableMode(bytes4)": FunctionFragment;
        "entryPoint()": FunctionFragment;
        "getDefaultValidator()": FunctionFragment;
        "getDisabledMode()": FunctionFragment;
        "getExecution(bytes4)": FunctionFragment;
        "getLastDisabledTime()": FunctionFragment;
        "getNonce(uint192)": FunctionFragment;
        "getNonce()": FunctionFragment;
        "initialize(address,bytes)": FunctionFragment;
        "setDefaultValidator(address,bytes)": FunctionFragment;
        "setExecution(bytes4,address,address,uint48,uint48,bytes)": FunctionFragment;
        "upgradeTo(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "disableMode" | "entryPoint" | "getDefaultValidator" | "getDisabledMode" | "getExecution" | "getLastDisabledTime" | "getNonce(uint192)" | "getNonce()" | "initialize" | "setDefaultValidator" | "setExecution" | "upgradeTo"): FunctionFragment;
    encodeFunctionData(functionFragment: "disableMode", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "entryPoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "getDefaultValidator", values?: undefined): string;
    encodeFunctionData(functionFragment: "getDisabledMode", values?: undefined): string;
    encodeFunctionData(functionFragment: "getExecution", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getLastDisabledTime", values?: undefined): string;
    encodeFunctionData(functionFragment: "getNonce(uint192)", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "getNonce()", values?: undefined): string;
    encodeFunctionData(functionFragment: "initialize", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setDefaultValidator", values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "setExecution", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "upgradeTo", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "disableMode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "entryPoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDefaultValidator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDisabledMode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getExecution", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getLastDisabledTime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getNonce(uint192)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getNonce()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDefaultValidator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setExecution", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
    events: {
        "DefaultValidatorChanged(address,address)": EventFragment;
        "ExecutionChanged(bytes4,address,address)": EventFragment;
        "Upgraded(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DefaultValidatorChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ExecutionChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}
export interface DefaultValidatorChangedEventObject {
    oldValidator: string;
    newValidator: string;
}
export type DefaultValidatorChangedEvent = TypedEvent<[
    string,
    string
], DefaultValidatorChangedEventObject>;
export type DefaultValidatorChangedEventFilter = TypedEventFilter<DefaultValidatorChangedEvent>;
export interface ExecutionChangedEventObject {
    selector: string;
    executor: string;
    validator: string;
}
export type ExecutionChangedEvent = TypedEvent<[
    string,
    string,
    string
], ExecutionChangedEventObject>;
export type ExecutionChangedEventFilter = TypedEventFilter<ExecutionChangedEvent>;
export interface UpgradedEventObject {
    newImplementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;
export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;
export interface KernelStorage extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: KernelStorageInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        disableMode(_disableFlag: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        entryPoint(overrides?: CallOverrides): Promise<[string]>;
        getDefaultValidator(overrides?: CallOverrides): Promise<[string]>;
        getDisabledMode(overrides?: CallOverrides): Promise<[string]>;
        getExecution(_selector: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[ExecutionDetailStructOutput]>;
        getLastDisabledTime(overrides?: CallOverrides): Promise<[number]>;
        "getNonce(uint192)"(key: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
        "getNonce()"(overrides?: CallOverrides): Promise<[BigNumber]>;
        initialize(_defaultValidator: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setDefaultValidator(_defaultValidator: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setExecution(_selector: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _validator: PromiseOrValue<string>, _validUntil: PromiseOrValue<BigNumberish>, _validAfter: PromiseOrValue<BigNumberish>, _enableData: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        upgradeTo(_newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    disableMode(_disableFlag: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    entryPoint(overrides?: CallOverrides): Promise<string>;
    getDefaultValidator(overrides?: CallOverrides): Promise<string>;
    getDisabledMode(overrides?: CallOverrides): Promise<string>;
    getExecution(_selector: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<ExecutionDetailStructOutput>;
    getLastDisabledTime(overrides?: CallOverrides): Promise<number>;
    "getNonce(uint192)"(key: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    "getNonce()"(overrides?: CallOverrides): Promise<BigNumber>;
    initialize(_defaultValidator: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setDefaultValidator(_defaultValidator: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setExecution(_selector: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _validator: PromiseOrValue<string>, _validUntil: PromiseOrValue<BigNumberish>, _validAfter: PromiseOrValue<BigNumberish>, _enableData: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    upgradeTo(_newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        disableMode(_disableFlag: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        entryPoint(overrides?: CallOverrides): Promise<string>;
        getDefaultValidator(overrides?: CallOverrides): Promise<string>;
        getDisabledMode(overrides?: CallOverrides): Promise<string>;
        getExecution(_selector: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<ExecutionDetailStructOutput>;
        getLastDisabledTime(overrides?: CallOverrides): Promise<number>;
        "getNonce(uint192)"(key: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        "getNonce()"(overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_defaultValidator: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setDefaultValidator(_defaultValidator: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setExecution(_selector: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _validator: PromiseOrValue<string>, _validUntil: PromiseOrValue<BigNumberish>, _validAfter: PromiseOrValue<BigNumberish>, _enableData: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        upgradeTo(_newImplementation: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "DefaultValidatorChanged(address,address)"(oldValidator?: PromiseOrValue<string> | null, newValidator?: PromiseOrValue<string> | null): DefaultValidatorChangedEventFilter;
        DefaultValidatorChanged(oldValidator?: PromiseOrValue<string> | null, newValidator?: PromiseOrValue<string> | null): DefaultValidatorChangedEventFilter;
        "ExecutionChanged(bytes4,address,address)"(selector?: PromiseOrValue<BytesLike> | null, executor?: PromiseOrValue<string> | null, validator?: PromiseOrValue<string> | null): ExecutionChangedEventFilter;
        ExecutionChanged(selector?: PromiseOrValue<BytesLike> | null, executor?: PromiseOrValue<string> | null, validator?: PromiseOrValue<string> | null): ExecutionChangedEventFilter;
        "Upgraded(address)"(newImplementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
        Upgraded(newImplementation?: PromiseOrValue<string> | null): UpgradedEventFilter;
    };
    estimateGas: {
        disableMode(_disableFlag: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        entryPoint(overrides?: CallOverrides): Promise<BigNumber>;
        getDefaultValidator(overrides?: CallOverrides): Promise<BigNumber>;
        getDisabledMode(overrides?: CallOverrides): Promise<BigNumber>;
        getExecution(_selector: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getLastDisabledTime(overrides?: CallOverrides): Promise<BigNumber>;
        "getNonce(uint192)"(key: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        "getNonce()"(overrides?: CallOverrides): Promise<BigNumber>;
        initialize(_defaultValidator: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setDefaultValidator(_defaultValidator: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setExecution(_selector: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _validator: PromiseOrValue<string>, _validUntil: PromiseOrValue<BigNumberish>, _validAfter: PromiseOrValue<BigNumberish>, _enableData: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        upgradeTo(_newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        disableMode(_disableFlag: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        entryPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDefaultValidator(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getDisabledMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getExecution(_selector: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getLastDisabledTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getNonce(uint192)"(key: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getNonce()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        initialize(_defaultValidator: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setDefaultValidator(_defaultValidator: PromiseOrValue<string>, _data: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setExecution(_selector: PromiseOrValue<BytesLike>, _executor: PromiseOrValue<string>, _validator: PromiseOrValue<string>, _validUntil: PromiseOrValue<BigNumberish>, _validAfter: PromiseOrValue<BigNumberish>, _enableData: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        upgradeTo(_newImplementation: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
