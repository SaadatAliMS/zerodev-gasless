"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ZeroDevSigner_1 = require("../ZeroDevSigner");
const AbstractSapiService_1 = __importDefault(require("./AbstractSapiService"));
const MORALIS_CHAIN_ID = {
    1: 'eth',
    5: 'goerli',
    137: 'polygon',
    80001: 'mumbai',
    43114: 'avalanche',
    43113: 'avalanche testnet',
    42161: 'arbitrum'
};
class MoralisApiService extends AbstractSapiService_1.default {
    constructor(headers) {
        super(headers);
        this.baseUrl = 'https://deep--index-moralis-io-0g2wxl.proxy.usesapi.com';
        if (MoralisApiService.singleton !== undefined)
            MoralisApiService.singleton = this;
        return MoralisApiService.singleton;
    }
    convertChainIdToMoralisChainId(chainId) {
        if (MORALIS_CHAIN_ID[chainId] !== undefined)
            return MORALIS_CHAIN_ID[chainId];
    }
    async getNativeBalance(chainId, address) {
        const moralisChainid = this.convertChainIdToMoralisChainId(chainId);
        if (moralisChainid !== undefined) {
            const response = await this.request(`/api/v2/${address}/balance`, 'GET', {
                chain: moralisChainid
            });
            const data = await response.json();
            return {
                assetType: ZeroDevSigner_1.AssetType.ETH,
                amount: data.balance
            };
        }
    }
    async getTokenBalances(chainId, address) {
        const moralisChainid = this.convertChainIdToMoralisChainId(chainId);
        if (moralisChainid !== undefined) {
            const response = await this.request(`/api/v2/${address}/erc20`, 'GET', {
                chain: moralisChainid
            });
            const data = await response.json();
            return data.map(token => ({
                assetType: ZeroDevSigner_1.AssetType.ERC20,
                address: token.token_address,
                amount: token.balance
            }));
        }
    }
    async getNFTBalances(chainId, address) {
        const moralisChainid = this.convertChainIdToMoralisChainId(chainId);
        if (moralisChainid !== undefined) {
            const response = await this.request(`/api/v2/${address}/nft`, 'GET', {
                chain: moralisChainid
            });
            const data = await response.json();
            if (data.result !== undefined) {
                const result = data.result;
                return result.map(nft => ({
                    assetType: ZeroDevSigner_1.AssetType[nft.contract_type],
                    tokenId: nft.token_id,
                    address: nft.token_address,
                    amount: nft.amount
                }));
            }
        }
    }
}
exports.default = MoralisApiService;
//# sourceMappingURL=MoralisApiService.js.map