"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGasPrice = void 0;
// https://github.com/stackup-wallet/userop.js/blob/main/src/preset/middleware/gasPrice.ts
const ethers_1 = require("ethers");
const eip1559GasPrice = async (provider) => {
    const [fee, block] = await Promise.all([
        provider.send('eth_maxPriorityFeePerGas', []),
        provider.getBlock('latest')
    ]);
    const tip = ethers_1.ethers.BigNumber.from(fee);
    const buffer = tip.div(100).mul(13);
    const maxPriorityFeePerGas = tip.add(buffer);
    const maxFeePerGas = (block.baseFeePerGas != null)
        ? block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas)
        : maxPriorityFeePerGas;
    return { maxFeePerGas, maxPriorityFeePerGas };
};
const getGasPrice = async (provider, fallback) => {
    let eip1559Error;
    try {
        return await eip1559GasPrice(provider);
    }
    catch (error) {
        eip1559Error = error;
        console.warn('getGas: eth_maxPriorityFeePerGas failed, falling back to legacy gas price.');
    }
    try {
        return await fallback();
    }
    catch (error) {
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        throw new Error(`${eip1559Error}, ${error}`);
    }
};
exports.getGasPrice = getGasPrice;
//# sourceMappingURL=gasPrice.js.map