import { ZeroDevSessionKeyPlugin } from '@zerodevapp/contracts-new';
import { MerkleTree } from 'merkletreejs';
import { TransactionRequest, TransactionResponse } from '@ethersproject/providers';
import { ZeroDevSigner } from '../ZeroDevSigner';
import { Signer, BigNumber, Contract } from 'ethers';
import { Deferrable } from 'ethers/lib/utils';
import { UserOperationStruct } from '@zerodevapp/contracts';
import { ClientConfig } from '../ClientConfig';
import { ZeroDevProvider } from '../ZeroDevProvider';
import { HttpRpcClient } from '../HttpRpcClient';
import { BaseAccountAPI, ExecuteType } from '../BaseAccountAPI';
export declare const DEFAULT_SESSION_KEY_PLUGIN = "0x6E2631aF80bF7a9cEE83F590eE496bCc2E40626D";
interface SessionPolicy {
    to: string;
    selectors?: string[];
}
export declare class SessionSigner extends ZeroDevSigner {
    sessionKeyPlugin: ZeroDevSessionKeyPlugin;
    sessionKey: Signer;
    validUntil: number;
    whitelist: SessionPolicy[];
    merkleTree: MerkleTree;
    signature: string;
    constructor(config: ClientConfig, provider: ZeroDevProvider, httpRpcClient: HttpRpcClient, smartAccountAPI: BaseAccountAPI, validUntil: number, whitelist: SessionPolicy[], signature: string, sessionKeySigner: Signer, sessionKeyPlugin?: ZeroDevSessionKeyPlugin);
    sendTransaction(transaction: Deferrable<TransactionRequest>, executeBatchType?: ExecuteType, retryCount?: number): Promise<TransactionResponse>;
    isReplacementOpError(errorIn: any): boolean;
    resendTransactionWithIncreasedGasFees(transaction: Deferrable<TransactionRequest>, userOperation: UserOperationStruct, executeBatchType: ExecuteType, retryCount: number): Promise<TransactionResponse>;
    approvePlugin(plugin: Contract, validUntil: BigNumber, validAfter: BigNumber, data: string): Promise<string>;
    signUserOperation(userOp: UserOperationStruct): Promise<string>;
    currentSessionNonce(): Promise<BigNumber>;
    getSessionNonce(address: string): Promise<BigNumber>;
    signUserOpWithSessionKey(userOp: UserOperationStruct): Promise<string>;
}
export {};
