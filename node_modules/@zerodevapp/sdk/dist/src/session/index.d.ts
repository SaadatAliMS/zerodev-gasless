import { ZeroDevSessionKeyPlugin } from '@zerodevapp/contracts-new';
import { ZeroDevSigner } from '../ZeroDevSigner';
import { Signer, ethers } from 'ethers';
import { SessionSigner } from './SessionSigner';
import { AccountImplementation } from '../accounts';
import { BundlerProvider, PaymasterProvider, SupportedGasToken } from '../types';
import { BaseAccountAPI, BaseApiParams } from '../BaseAccountAPI';
import { FallbackProvider, JsonRpcProvider } from '@ethersproject/providers';
export interface SessionPolicy {
    to: string;
    selectors?: string[];
}
export interface SessionKeyData {
    ownerAddress: string;
    ownerIndex: number;
    signature: string;
    whitelist: SessionPolicy[];
    validUntil: number;
    sessionPrivateKey?: string;
}
export declare function createSessionKey(from: ZeroDevSigner, whitelist: SessionPolicy[], validUntil: number, sessionKeyAddr?: string, sessionKeyPlugin?: ZeroDevSessionKeyPlugin): Promise<string>;
export interface SessionKeySignerParams {
    projectId: string;
    sessionKeyData: string;
    privateSigner?: Signer;
    rpcProvider?: JsonRpcProvider | FallbackProvider;
    bundlerUrl?: string;
    skipFetchSetup?: boolean;
    gasToken?: SupportedGasToken;
    implementation?: AccountImplementation<BaseAccountAPI, BaseApiParams>;
    useWebsocketProvider?: boolean;
    transactionTimeout?: number;
    paymasterProvider?: PaymasterProvider;
    bundlerProvider?: BundlerProvider;
}
export declare function createSessionKeySigner(params: SessionKeySignerParams): Promise<SessionSigner>;
export declare function serializeSessionKeyData(sessionKeyData: SessionKeyData): string;
export declare function deserializeSessionKeyData(base64String: string): SessionKeyData;
export declare function revokeSessionKey(signer: ZeroDevSigner, sessionPublicKey: string, overrides?: ethers.Overrides): Promise<ethers.ContractTransaction>;
