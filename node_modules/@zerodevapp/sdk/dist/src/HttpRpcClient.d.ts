import { BigNumberish } from 'ethers';
import { UserOperationStruct } from '@zerodevapp/contracts';
import { BundlerProvider } from './types';
/**
 * return value from estimateUserOpGas
 */
export interface EstimateUserOpGasResult {
    /**
     * the preVerification gas used by this UserOperation.
     */
    preVerificationGas: BigNumberish;
    /**
     * gas used for validation of this UserOperation, including account creation
     */
    verificationGas: BigNumberish;
    /**
     * the deadline after which this UserOperation is invalid (not a gas estimation parameter, but returned by validation
     */
    validUntil?: BigNumberish;
    /**
     * the deadline after which this UserOperation is valid (not a gas estimation parameter, but returned by validation
     */
    validAfter?: BigNumberish;
    /**
     * estimated cost of calling the account with the given callData
     */
    callGasLimit: BigNumberish;
}
export interface UserOperationReceipt {
    userOpHash: BigNumberish;
    entryPoint: string;
    sender: string;
    nonce: BigNumberish;
    paymaster: string;
    actualGasCost: BigNumberish;
    actualGasUsed: BigNumberish;
    success: boolean;
    reason: string;
    logs: any;
    receipt: any;
}
export declare class HttpRpcClient {
    readonly bundlerUrl: string;
    readonly entryPointAddress: string;
    readonly chainId: number;
    readonly projectId: string;
    readonly skipFetchSetup?: boolean | undefined;
    readonly bundlerProvider?: BundlerProvider | undefined;
    private readonly userOpJsonRpcProvider;
    initializing: Promise<void>;
    constructor(bundlerUrl: string, entryPointAddress: string, chainId: number, projectId: string, skipFetchSetup?: boolean | undefined, bundlerProvider?: BundlerProvider | undefined);
    validateChainId(): Promise<void>;
    /**
     * send a UserOperation to the bundler
     * @param userOp1
     * @return userOpHash the id of this operation, for getUserOperationTransaction
     */
    sendUserOpToBundler(userOp1: UserOperationStruct): Promise<string>;
    estimateUserOpGas(userOp1: Partial<UserOperationStruct>): Promise<EstimateUserOpGasResult>;
    getUserOperationReceipt(hash: string): Promise<UserOperationReceipt>;
    private printUserOperation;
}
