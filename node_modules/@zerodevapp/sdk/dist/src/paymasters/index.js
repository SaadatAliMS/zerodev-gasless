"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPaymaster = void 0;
const constants = __importStar(require("../constants"));
const api = __importStar(require("../api"));
const TokenPaymasterAPI_1 = require("./TokenPaymasterAPI");
const VerifyingPaymasterAPI_1 = require("./VerifyingPaymasterAPI");
async function getPaymaster(projectId, paymasterUrl, chainId, entryPointAddress, paymasterProvider, gasToken) {
    let gasTokenAddress;
    if (gasToken === 'TEST_ERC20')
        gasTokenAddress = '0x3870419Ba2BBf0127060bCB37f69A1b1C090992B';
    if (gasToken === 'USDC') {
        gasTokenAddress = constants.USDC_ADDRESS[chainId];
    }
    if (gasToken === 'PEPE') {
        gasTokenAddress = constants.PEPE_ADDRESS[chainId];
    }
    if (gasTokenAddress !== undefined) {
        const paymasterAddress = await api.getPaymasterAddress(chainId, entryPointAddress, paymasterProvider);
        if (paymasterAddress !== undefined) {
            return new TokenPaymasterAPI_1.TokenPaymasterAPI(projectId, paymasterUrl, chainId, entryPointAddress, gasTokenAddress, paymasterAddress, paymasterProvider);
        }
    }
    return new VerifyingPaymasterAPI_1.VerifyingPaymasterAPI(projectId, paymasterUrl, chainId, entryPointAddress, paymasterProvider);
}
exports.getPaymaster = getPaymaster;
//# sourceMappingURL=index.js.map