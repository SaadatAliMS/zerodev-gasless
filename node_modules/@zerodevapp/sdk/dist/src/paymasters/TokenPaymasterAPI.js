"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenPaymasterAPI = void 0;
const properties_1 = require("@ethersproject/properties");
const api_1 = require("../api");
const errors_1 = require("../errors");
const PaymasterAPI_1 = require("./PaymasterAPI");
const utils_1 = require("../utils");
const ethers_1 = require("ethers");
const constants_1 = require("../constants");
class TokenPaymasterAPI extends PaymasterAPI_1.PaymasterAPI {
    constructor(projectId, paymasterUrl, chainId, entryPointAddress, gasTokenAddress, paymasterAddress, paymasterProvider) {
        super();
        this.projectId = projectId;
        this.paymasterUrl = paymasterUrl;
        this.chainId = chainId;
        this.entryPointAddress = entryPointAddress;
        this.gasTokenAddress = gasTokenAddress;
        this.paymasterAddress = paymasterAddress;
        this.paymasterProvider = paymasterProvider;
    }
    async createGasTokenApprovalRequest(provider) {
        const erc20 = new ethers_1.ethers.Contract(this.gasTokenAddress, constants_1.ERC20_ABI, provider);
        return {
            to: erc20.address,
            value: ethers_1.BigNumber.from(0),
            data: erc20.interface.encodeFunctionData('approve', [this.paymasterAddress, constants_1.ERC20_APPROVAL_AMOUNT[erc20.address]])
        };
    }
    async getPaymasterResp(userOp, erc20UserOp) {
        const resolvedUserOp = await (0, properties_1.resolveProperties)(userOp);
        const hexifiedUserOp = (0, utils_1.hexifyUserOp)(resolvedUserOp);
        const resolvedERC20UserOp = await (0, properties_1.resolveProperties)(erc20UserOp);
        const hexifiedERC20UserOp = (0, utils_1.hexifyUserOp)(resolvedERC20UserOp);
        const paymasterResp = await (0, api_1.signUserOp)(this.projectId, this.chainId, hexifiedUserOp, this.entryPointAddress, this.paymasterUrl, this.paymasterProvider, resolvedUserOp.callData, this.gasTokenAddress, hexifiedERC20UserOp, resolvedERC20UserOp.callData);
        if (paymasterResp === undefined) {
            throw errors_1.ErrTransactionFailedGasChecks;
        }
        return paymasterResp;
    }
}
exports.TokenPaymasterAPI = TokenPaymasterAPI;
//# sourceMappingURL=TokenPaymasterAPI.js.map