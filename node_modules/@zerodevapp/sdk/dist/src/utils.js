"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProvider = exports.addBuffer = exports.getERC1155Contract = exports.getERC20Contract = exports.getERC721Contract = exports.fixSignedData = exports.hexifyUserOp = exports.getRpcUrl = exports.parseNumber = void 0;
const ethers_1 = require("ethers");
const utils_1 = require("ethers/lib/utils");
const constants = __importStar(require("./constants"));
const providers_1 = require("@ethersproject/providers");
const InfuraWebSocketProvider_1 = require("./InfuraWebSocketProvider");
function parseNumber(a) {
    if (a == null || a === '')
        return null;
    return ethers_1.BigNumber.from(a.toString());
}
exports.parseNumber = parseNumber;
const getRpcUrl = (chainId) => {
    return constants.CHAIN_ID_TO_NODE[chainId];
};
exports.getRpcUrl = getRpcUrl;
const hexifyUserOp = (resolvedUserOp) => {
    return Object.keys(resolvedUserOp)
        .map((key) => {
        let val = (resolvedUserOp)[key];
        if (typeof val !== 'string' || !val.startsWith('0x')) {
            val = (0, utils_1.hexValue)(val);
        }
        return [key, val];
    })
        .reduce((set, [k, v]) => (Object.assign(Object.assign({}, set), { [k]: v })), {});
};
exports.hexifyUserOp = hexifyUserOp;
// Some signers do not return signed data with 0x prefix, which makes it
// an invalid hex byte string.  So we first check if it's a hex string,
// and if it's not, we prepend 0x and check if it's a valid hex string.
// If it's still not, we throw an error.
//
// Also make sure the v value is 27/28 instead of 0/1, or it wouldn't
// work with on-chain validation.
const fixSignedData = (sig) => {
    let signature = sig;
    if (!ethers_1.ethers.utils.isHexString(signature)) {
        signature = `0x${signature}`;
        if (!ethers_1.ethers.utils.isHexString(signature)) {
            throw new Error('Invalid signed data ' + sig);
        }
    }
    let { r, s, v } = ethers_1.ethers.utils.splitSignature(signature);
    if (v == 0)
        v = 27;
    if (v == 1)
        v = 28;
    const joined = ethers_1.ethers.utils.joinSignature({ r, s, v });
    return joined;
};
exports.fixSignedData = fixSignedData;
const getERC721Contract = (provider, address) => {
    return new ethers_1.Contract(address, constants.ERC721_ABI, provider);
};
exports.getERC721Contract = getERC721Contract;
const getERC20Contract = (provider, address) => {
    return new ethers_1.Contract(address, constants.ERC20_ABI, provider);
};
exports.getERC20Contract = getERC20Contract;
const getERC1155Contract = (provider, address) => {
    return new ethers_1.Contract(address, constants.ERC1155_ABI, provider);
};
exports.getERC1155Contract = getERC1155Contract;
const addBuffer = (value, buffer = 1) => {
    return ethers_1.BigNumber.from(value).mul(ethers_1.BigNumber.from(100 * buffer)).div(100);
};
exports.addBuffer = addBuffer;
const getProvider = async (chainId, providerUrl, useWebsocketProvider = false, skipFetchSetup = false) => {
    let provider;
    if (!skipFetchSetup && providerUrl.includes(constants.INFURA_API_KEY) && ![43114, 43113].includes(chainId)) {
        const infuraProvider = new providers_1.InfuraProvider(chainId, constants.INFURA_API_KEY);
        if (useWebsocketProvider && ![137, 80001].includes(chainId)) {
            try {
                provider = new ethers_1.ethers.providers.FallbackProvider([
                    new InfuraWebSocketProvider_1.InfuraWebsocketProvider(chainId, constants.INFURA_API_KEY),
                    infuraProvider
                ]);
                await provider.detectNetwork();
            }
            catch (_) {
                return infuraProvider;
            }
        }
        else {
            provider = infuraProvider;
        }
    }
    else {
        provider = new ethers_1.ethers.providers.JsonRpcProvider({ url: providerUrl, skipFetchSetup });
    }
    return provider;
};
exports.getProvider = getProvider;
//# sourceMappingURL=utils.js.map