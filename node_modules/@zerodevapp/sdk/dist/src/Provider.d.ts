import { FallbackProvider, JsonRpcProvider } from '@ethersproject/providers';
import { ClientConfig } from './ClientConfig';
import { ZeroDevProvider } from './ZeroDevProvider';
import { Signer } from '@ethersproject/abstract-signer';
import { BaseValidatorAPI } from './validators';
import { BundlerProvider } from './types';
/**
 * wrap an existing provider to tunnel requests through Account Abstraction.
 * @param originalProvider the normal provider
 * @param config see ClientConfig for more info
 * @param originalSigner use this signer as the owner. of this wallet. By default, use the provider's signer
 */
export declare function wrapProvider(originalProvider: JsonRpcProvider | FallbackProvider, config: ClientConfig, originalSigner: Signer, options?: {
    skipFetchSetup?: boolean;
    bundlerGasCalculation?: boolean;
    transactionTimeout?: number;
    bundlerProvider?: BundlerProvider;
    onlySendSponsoredTransaction?: boolean;
}): Promise<ZeroDevProvider>;
/**
 * wrap an existing provider to tunnel requests through Account Abstraction.
 * @param originalProvider the normal provider
 * @param config see ClientConfig for more info
 * @param originalSigner use this signer as the owner. of this wallet. By default, use the provider's signer
 */
export declare function wrapV2Provider(originalProvider: JsonRpcProvider | FallbackProvider, config: ClientConfig, originalSigner: Signer, defaultValidator: BaseValidatorAPI, validator: BaseValidatorAPI, options?: {
    skipFetchSetup?: boolean;
    bundlerGasCalculation?: boolean;
    transactionTimeout?: number;
}): Promise<ZeroDevProvider>;
