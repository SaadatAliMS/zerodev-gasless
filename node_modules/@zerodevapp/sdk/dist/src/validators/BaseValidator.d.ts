import { IEntryPoint, UserOperationStruct } from '@zerodevapp/contracts';
import { Signer } from 'ethers';
import { Bytes } from 'ethers/lib/utils';
export declare enum ValidatorMode {
    sudo = "0x00000000",
    plugin = "0x00000001",
    enable = "0x00000002"
}
export interface BaseValidatorAPIParams {
    validatorAddress: string;
    entrypoint: IEntryPoint;
    mode: ValidatorMode;
    enableSignature?: string;
    validUntil?: number;
    validAfter?: number;
    executor?: string;
    selector?: string;
}
export declare abstract class BaseValidatorAPI {
    validatorAddress: string;
    entrypoint: IEntryPoint;
    enableSignature?: string;
    validUntil: number;
    validAfter: number;
    executor?: string;
    selector?: string;
    mode: ValidatorMode;
    constructor(params: BaseValidatorAPIParams);
    getAddress(): string;
    setEnableSignature(enableSignature: string): void;
    abstract getEnableData(): Promise<string>;
    abstract signer(): Promise<Signer>;
    approveExecutor(kernel: string, selector: string, executor: string, validUntil: number, validAfter: number, validator: BaseValidatorAPI): Promise<string>;
    getSignature(userOperation: UserOperationStruct): Promise<string>;
    abstract signUserOp(userOperation: UserOperationStruct): Promise<string>;
    abstract signMessage(message: Bytes | string): Promise<string>;
}
