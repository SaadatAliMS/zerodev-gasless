"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ERC165SessionKeyValidator = void 0;
const utils_1 = require("ethers/lib/utils");
const BaseValidator_1 = require("./BaseValidator");
/*
address sessionKey = address(bytes20(_data[0:20]));
bytes4 interfaceId = bytes4(_data[20:24]);
bytes4 selector = bytes4(_data[24:28]);
uint48 validUntil = uint48(bytes6(_data[28:34]));
uint48 validAfter = uint48(bytes6(_data[34:40]));
uint32 addressOffset = uint32(bytes4(_data[40:44]));
*/
class ERC165SessionKeyValidator extends BaseValidator_1.BaseValidatorAPI {
    constructor(params) {
        super(params);
        this.sessionKey = params.sessionKey;
        this.erc165InterfaceId = params.erc165InterfaceId;
        this.addressOffset = params.addressOffset;
    }
    async signer() {
        return await Promise.resolve(this.sessionKey);
    }
    async getEnableData() {
        return (0, utils_1.hexConcat)([
            await this.sessionKey.getAddress(),
            (0, utils_1.hexZeroPad)(this.erc165InterfaceId, 4),
            (0, utils_1.hexZeroPad)(this.selector, 4),
            (0, utils_1.hexZeroPad)((0, utils_1.hexlify)(this.validUntil), 6),
            (0, utils_1.hexZeroPad)((0, utils_1.hexlify)(this.validAfter), 6),
            (0, utils_1.hexZeroPad)((0, utils_1.hexlify)(this.addressOffset), 4)
        ]);
    }
    async signUserOp(userOperation) {
        const userOpHash = await this.entrypoint.getUserOpHash(Object.assign(Object.assign({}, userOperation), { signature: '0x' }));
        return (0, utils_1.hexlify)(await this.sessionKey.signMessage((0, utils_1.arrayify)(userOpHash)));
    }
    async signMessage(message) {
        return await this.sessionKey.signMessage(message);
    }
}
exports.ERC165SessionKeyValidator = ERC165SessionKeyValidator;
//# sourceMappingURL=ERC165SessionKeyValidator.js.map