"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseValidatorAPI = exports.ValidatorMode = void 0;
const kernel_contracts_v2_1 = require("@zerodevapp/kernel-contracts-v2");
const utils_1 = require("ethers/lib/utils");
var ValidatorMode;
(function (ValidatorMode) {
    ValidatorMode["sudo"] = "0x00000000";
    ValidatorMode["plugin"] = "0x00000001";
    ValidatorMode["enable"] = "0x00000002";
})(ValidatorMode = exports.ValidatorMode || (exports.ValidatorMode = {}));
class BaseValidatorAPI {
    constructor(params) {
        var _a, _b;
        this.validatorAddress = params.validatorAddress;
        this.entrypoint = params.entrypoint;
        this.executor = params.executor;
        this.enableSignature = params.enableSignature;
        this.selector = params.selector;
        this.validUntil = (_a = params.validUntil) !== null && _a !== void 0 ? _a : 0;
        this.validAfter = (_b = params.validAfter) !== null && _b !== void 0 ? _b : 0;
        this.mode = params.mode;
    }
    getAddress() {
        return this.validatorAddress;
    }
    setEnableSignature(enableSignature) {
        this.enableSignature = enableSignature;
    }
    async approveExecutor(kernel, selector, executor, validUntil, validAfter, validator) {
        const sender = kernel;
        const ownerSig = await (await this.signer())._signTypedData({
            name: 'Kernel',
            version: '0.0.2',
            chainId: (await this.entrypoint.provider.getNetwork()).chainId,
            verifyingContract: sender
        }, {
            ValidatorApproved: [
                { name: 'sig', type: 'bytes4' },
                { name: 'validatorData', type: 'uint256' },
                { name: 'executor', type: 'address' },
                { name: 'enableData', type: 'bytes' }
            ]
        }, {
            sig: selector,
            validatorData: (0, utils_1.hexConcat)([(0, utils_1.hexZeroPad)((0, utils_1.hexlify)(validUntil), 6), (0, utils_1.hexZeroPad)((0, utils_1.hexlify)(validAfter), 6), validator.getAddress()]),
            executor,
            enableData: (0, utils_1.hexlify)(await validator.getEnableData())
        });
        return ownerSig;
    }
    async getSignature(userOperation) {
        const kernel = kernel_contracts_v2_1.Kernel__factory.connect(await userOperation.sender, this.entrypoint.provider);
        let mode;
        try {
            if ((await kernel.getDefaultValidator()).toLowerCase() === this.validatorAddress.toLowerCase()) {
                mode = ValidatorMode.sudo;
            }
            else if ((await kernel.getExecution(userOperation.callData.toString().slice(0, 6))).validator.toLowerCase() === this.validatorAddress.toLowerCase()) {
                mode = ValidatorMode.plugin;
            }
            else {
                mode = ValidatorMode.enable;
            }
        }
        catch (e) {
            if (this.mode === ValidatorMode.plugin) {
                mode = ValidatorMode.enable;
            }
            else {
                mode = this.mode;
            }
        }
        if (mode === ValidatorMode.sudo || mode === ValidatorMode.plugin) {
            const res = (0, utils_1.hexConcat)([this.mode, await this.signUserOp(userOperation)]);
            return res;
        }
        else {
            const enableData = await this.getEnableData();
            const enableSignature = this.enableSignature;
            return (0, utils_1.hexConcat)([
                mode,
                (0, utils_1.hexZeroPad)((0, utils_1.hexlify)(this.validUntil), 6),
                (0, utils_1.hexZeroPad)((0, utils_1.hexlify)(this.validAfter), 6),
                (0, utils_1.hexZeroPad)(this.validatorAddress, 20),
                (0, utils_1.hexZeroPad)(this.executor, 20),
                (0, utils_1.hexZeroPad)(((0, utils_1.hexlify)(enableData.length / 2 - 1)), 32),
                enableData,
                (0, utils_1.hexZeroPad)((0, utils_1.hexlify)(enableSignature.length / 2 - 1), 32),
                enableSignature,
                await this.signUserOp(userOperation)
            ]);
        }
    }
}
exports.BaseValidatorAPI = BaseValidatorAPI;
//# sourceMappingURL=BaseValidator.js.map