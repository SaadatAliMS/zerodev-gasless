/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { NonceManager, NonceManagerInterface } from "../NonceManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint192",
        name: "key",
        type: "uint192",
      },
    ],
    name: "getNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint192",
        name: "key",
        type: "uint192",
      },
    ],
    name: "incrementNonce",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint192",
        name: "",
        type: "uint192",
      },
    ],
    name: "nonceSequenceNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610292908161001c8239f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c80630bd28e3b1461011c5780631b2e01b8146100c2576335567e1a1461004057600080fd5b346100be5773ffffffffffffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000082602094610088366101e5565b9416815280865281812077ffffffffffffffffffffffffffffffffffffffffffffffff8516825286522054918351931b16178152f35b5080fd5b50346100be578060209273ffffffffffffffffffffffffffffffffffffffff6100ea366101e5565b9116825281855277ffffffffffffffffffffffffffffffffffffffffffffffff83832091168252845220549051908152f35b50346100be5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100be5760043577ffffffffffffffffffffffffffffffffffffffffffffffff81168091036101e15733835282602052818320908352602052812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146101b457600101905580f35b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b8280fd5b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60409101126102575760043573ffffffffffffffffffffffffffffffffffffffff81168103610257579060243577ffffffffffffffffffffffffffffffffffffffffffffffff811681036102575790565b600080fdfea2646970667358221220fb158602ab2dd9924f8a611485a56c7e22613576077bac0971ba5441ac32da1064736f6c63430008110033";

type NonceManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NonceManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NonceManager__factory extends ContractFactory {
  constructor(...args: NonceManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NonceManager> {
    return super.deploy(overrides || {}) as Promise<NonceManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NonceManager {
    return super.attach(address) as NonceManager;
  }
  override connect(signer: Signer): NonceManager__factory {
    return super.connect(signer) as NonceManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NonceManagerInterface {
    return new utils.Interface(_abi) as NonceManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NonceManager {
    return new Contract(address, _abi, signerOrProvider) as NonceManager;
  }
}
